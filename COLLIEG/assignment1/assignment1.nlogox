<?xml version="1.0" encoding="utf-8"?>
<model version="NetLogo 7.0.0" snapToGrid="true">
  <code><![CDATA[breed [influencers influencer]
breed [customers customer]

globals [
  window-size
  patch-scale
  allowed-colors
  rest-colors
  restaurant-centers  ;; list of [rest-id center-patch]
  cuisines-list
  restaurant-starting-money
]

patches-own [
  is-restaurant?      ;; true if this patch hosts a restaurant
  rest-id             ;; restaurant identifier
  price               ;; "cheap" | "affordable" | "expensive"
  quality             ;; current quality (0–1)
  base-color          ;; base hue for visualization
  money               ;; available funds for advertisement etc.
  open?               ;; open or closed
  cuisine             ;; optional, e.g. "thai", "mexican", etc.
]

influencers-own [
  influ-color
  last-rest-id
  last-rest-color
  ticks-left          ;; number of ticks left to keep promoting
]

customers-own [
  state                ;; "wandering" | "inside" | "hungry" | "targeting"
  target-rest-id       ;; which restaurant they plan to visit
  stay-ticks           ;; how many ticks to remain inside
  hunger-level         ;; increases over time; above threshold -> seek restaurant
  preference-quality   ;; how much they care about quality (0–1)
  preference-price     ;; how much they care about price (0–1)
  preference-distance  ;; how much they care about proximity (0–1)
  favorite-cuisine
  just-left?
  inside-rest-id  
]

;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup procedures ;;;
;;;;;;;;;;;;;;;;;;;;;;;;

to setup
  clear-all
  set window-size 640
  
  set patch-scale (window-size / grid-size)
  set-patch-size patch-scale
  resize-world (- grid-size / 2) (grid-size / 2 - 1) (- grid-size / 2) (grid-size / 2 - 1)
  
  set-default-shape customers "person"
  set-default-shape influencers "person business"
  
  let desired-pixel-size 15
  let base-agent-size (desired-pixel-size / patch-scale)
  
  ;; adjust agent size based on grid-size
  let size-scale 1
  if grid-size <= 25 [ set size-scale 1.6 ]     ;; even smaller for very small grids
  if grid-size >= 100 [ set size-scale 0.8 ]    ;; slightly larger for big worlds
  
  set base-agent-size base-agent-size * size-scale
  
  set allowed-colors generate-allowed-colors
  
  ;; === Precompute softmax-based starting money ===
  let base-scores n-values 6 [ random-float softmax-variance ]
  
  ;; Softmax transformation
  let exp-scores map [ val -> exp val ] base-scores
  let sum-exp sum exp-scores
  let softmax-weights map [ val -> val / sum-exp ] exp-scores
  
  ;; Allocate according to weights
  set restaurant-starting-money map [ w -> w * total-budget ] softmax-weights
  
  if debug-mode [
    print (word "Base scores: "       map [x -> precision x 2] base-scores)
    print (word "Softmax weights: "   map [w -> precision w 3] softmax-weights)
    print (word "Allocated funds: "   map [a -> precision a 1] restaurant-starting-money)
    print (word "Sum of allocations: " precision (sum restaurant-starting-money) 2)
  ]

  setup-restaurants
  
  create-influencers num-influencers [
    let c item (who mod length allowed-colors) allowed-colors
    set color c
    set influ-color c
    set size base-agent-size
    set label (word "influ" (who + 1 ))
    set label-color white
    
    ;; new unified logical reference instead of coordinates
    set last-rest-id -1
    set last-rest-color black
    set ticks-left 0
  ]
  
  create-customers num-customers [
    set color gray
    set size base-agent-size
    
    set state "wandering"
    set target-rest-id -1
    set stay-ticks 0
    set hunger-level random-float 1
    set preference-quality random-float 1
    set preference-price random-float 1
    set preference-distance random-float 1
    set favorite-cuisine one-of cuisines-list
    set just-left? 0
    set inside-rest-id -1
    
    if debug-mode [
      print preference-quality
      print preference-price
      print preference-distance
      print favorite-cuisine
    ]
  ]
  
  reset-ticks
end

to-report generate-allowed-colors
  let colors []
  let base 10
  while [base < 140] [
    let i 1
    while [i < 10] [
      let c (base + i)
      if (c mod 10 != 0) and (c mod 10 != 9) [
        set colors lput c colors
      ]
      set i i + 1
    ]
    set base base + 10
  ]
  report colors
end

to setup-restaurants
  ;; orchestrator – clear and create 6 restaurant zones
  ask patches [ 
    set is-restaurant? false 
    set rest-id -1
    set pcolor black 
  ]
  
  let center-coords restaurant-center-coords
  set rest-colors [red orange pink green blue violet]
  set cuisines-list ["thai" "mexican" "italian" "japanese" "indian" "greek"]
  
  set restaurant-centers []
  
  ;; radius in patches for each restaurant area (controls how many patches per restaurant)
  let rest-radius max list 1 round (grid-size ^ 0.8 / 10)
  
  (foreach center-coords rest-colors n-values 6 [i -> i] [
    [coord rest-color id] ->
      let cx item 0 coord
      let cy item 1 coord
      ;; store center patch reference
      let center-patch patch cx cy
    
      if center-patch != nobody [
        set restaurant-centers lput (list id center-patch) restaurant-centers
      ]
    
      mark-restaurant-area coord rest-radius rest-color id
    
      ;; place label at adjusted center patch (slightly right for large grids)
      ;; adjust horizontal offset depending on grid size
      let offset-x round (grid-size / 75)  ;; e.g. 0 at 20×20, 1 at 80×80, 2 at 160×160
      ask patch (cx + offset-x) cy [
        set plabel item id cuisines-list
        set plabel-color white
      ]  
  ])
end

to-report restaurant-center-coords
  ;; six points around a circle at fixed radius
  let radius (grid-size / 3)   ;; distance from origin (adjustable)
  let coords []
  (foreach n-values 6 [i -> i] [
    [k] ->
      let angle (360 * k / 6)
      let x round (radius * cos angle)
      let y round (radius * sin angle)
      set coords lput (list x y) coords
  ])
  report coords
end

to mark-restaurant-area [coord rest-radius rest-color id]
  ;; mark all patches within a given radius as belonging to restaurant id
  let cx item 0 coord
  let cy item 1 coord
  ask patches with [distancexy cx cy <= rest-radius] [
    set is-restaurant? true
    set rest-id id
    set base-color rest-color
    set pcolor rest-color
    set open? true 
  ]
  init-restaurant-attributes id
end

to-report restaurant-money [rid]
  let center item 1 (item rid restaurant-centers)
  report [money] of center
end

to init-restaurant-attributes [id]
  let c item id cuisines-list
  ;; apply uniform attributes to all patches belonging to the same restaurant
  ask patches with [rest-id = id] [
    set quality 0.7 + random-float 0.3            ;; between 0.7–1.0
    set price one-of ["cheap" "affordable" "expensive"]
    set cuisine c
  ]
  ;; only the center patch holds money
  let center item 1 (item id restaurant-centers)
  let starting-fund item id restaurant-starting-money
  ask center [ set money floor starting-fund ]
end

;;;;;;;;;;;;;;;;;;;;;
;;; Go procedures ;;;
;;;;;;;;;;;;;;;;;;;;;

to go
  influencer-step
  customer-step
  restaurant-step
  draw-influencer-halos
  ;; --- stop condition: simulation ends when only one restaurant survives ---
  if surviving-restaurants <= 1 [
    ;;user-message (word "Simulation stopped: only " surviving-restaurants " restaurant remains.")
    stop
  ]
  tick
end

to influencer-step
  ask influencers [
    wandering   ;; just wander

    ;; promotion timer management
    if ticks-left > 0 [
      set ticks-left ticks-left - 1
    ]
    if ticks-left = 0 and last-rest-id != -1 [
      ;; reset only once, when the campaign just ended
      set last-rest-id -1
      set last-rest-color black
      set color influ-color   ;; optionally reset color
    ]
    
    ;; share continuously while a restaurant is remembered
    if last-rest-id != -1 [
      share-restaurant-tip
    ]
  ]
end

to restaurant-step
  foreach restaurant-centers [
    rpair ->
      let rid item 0 rpair
      let center-patch item 1 rpair
      ask center-patch [ 
      if debug-mode [
        if ticks mod 100 = 0 [
          show (word "Restaurant " rid 
                     " money=" money
                     " open=" open?
                     " any influencer? " any? influencers with [last-rest-id = rid])
        ]
      ]
      manage-restaurant 
    ]
  ]
end

to manage-restaurant
  if not is-restaurant? [ stop ]
  
  ;; Basic economic flow
  if (ticks mod 24 = 0) [
    set money money - maintenance-cost   ;; e.g. daily expenses
  ]
  
  ;; BANKRUPTCY CHECK
  if money <= 0 [
    close-restaurant rest-id
    stop                                    ;; this center is no longer a restaurant
  ]
  
  if debug-mode [
    if ticks mod 100 = 0 [
      show (word "[MANAGE] Rest " rest-id
                " money=" precision money 2
                " influencer-price=" influencer-price
                " >? " (money > influencer-price))
    ]
  ]

  
  ;; hire an influencer
  if money > 2 * influencer-price [
    hire-influencer
  ]
end

to close-restaurant [rid]
  ;; kick out customers inside that restaurant (order no longer matters)
  ask customers with [state = "inside" and inside-rest-id = rid] [
    leave-restaurant "bankruptcy"
  ]
  
  ;; free influencers promoting this restaurant
  ask influencers with [last-rest-id = rid] [
    set last-rest-id -1
    set last-rest-color black
    set ticks-left 0
    set color influ-color
  ]
  
  ;; mark all patches as closed + visually remove them
  ask patches with [rest-id = rid] [
    set open? false
    set is-restaurant? false
    set rest-id -1
    set pcolor black
    set plabel ""                    ;; clear label if any
  ]
end

to hire-influencer
  let free-influencers influencers with [last-rest-id = -1]
  if any? free-influencers [
    let chosen one-of free-influencers
    ask chosen [
      set last-rest-id [rest-id] of myself
      set last-rest-color [base-color] of myself
      set ticks-left influencer-duration  ;; promotion duration
      set color [base-color] of myself
    ]
    set money money - influencer-price
  ]
end

to share-restaurant-tip  ;; influencer context
  let valid? any? patches with [is-restaurant? and open? and rest-id = [last-rest-id] of myself]
  if not valid? [ stop ]
  ask customers in-radius meet-radius
    with [state = "wandering" and just-left? = 0 and hunger-level > 0.5] [

    let shared-id [last-rest-id] of myself

    ;; only share valid restaurant IDs
    if shared-id != -1 [
      set target-rest-id shared-id
      set color [last-rest-color] of myself
      set state "targeting"
    ]
  ]
end

to customer-step
  ask customers [
    ;; cooldown visual effect
    update-visuals
    
    update-hunger

    ;; --- Behavioural state transitions ---
    if hunger-level > 0.85 and just-left? = 0 and state != "targeting" [
      set state "hungry"
    ]
        
    ;; --- Combined logic for inside state ---
    if state = "inside" [
      let rpatch patch-here
      ;; if restaurant still valid → continue stay
      ifelse [is-restaurant?] of rpatch and [open?] of rpatch [
        stay-in-restaurant
      ][
        leave-restaurant "restaurant-closed"
      ]
    ]
    
    ;; --- Other states --
    if state = "hungry" [ choose-restaurant ]
    if state = "wandering" [ wandering ]
    if state = "targeting" [ targeting ]
  ]
end

to update-visuals
  if just-left? > 0 [
    set just-left? just-left? - 1
    
    ;; pulsating fade effect between white ↔ gray
    ;; sin() creates smooth brightness oscillation
    let pulse (sin (ticks * 40))       ;; oscillates quickly
    let fade (abs pulse * (just-left? / 5))  ;; intensity fades with time
    set color scale-color gray (1 + fade) 0 2
  ]
end

to update-hunger
  ifelse just-left? = 0 [
    set hunger-level hunger-level + hunger-rate
  ][
    set hunger-level hunger-level + (hunger-rate * 0.05)
  ]
  if hunger-level > 1 [ set hunger-level 1 ]
end

to targeting
  ;; store once locally so we can use inside patch contexts
  let rid target-rest-id
  
  ;; --- SAFETY CHECK ---
  ;; if the target restaurant no longer exists (bankrupt or closed), abort immediately
  if not valid-restaurant? rid [
    handle-target-vanished rid "invalid-target"
    stop
  ]

  ;; if the customer is physically on any patch belonging to the target restaurant
  ifelse [is-restaurant?] of patch-here and [rest-id] of patch-here = rid [
    
    ;; === ARRIVAL ===
    set state "inside"
    set stay-ticks 50 + random 150
    set color [base-color] of patch-here
    set hunger-level 0
    set inside-rest-id rid 
    ;; restaurant earns income once per entry
    let center item 1 (item rid restaurant-centers)
    ask center [
      let income 50 + random 20
      set money money + income
    ]

    ;; clear the pursuit target to avoid re-aiming loops
    set target-rest-id -1

  ] [
    
    ;; === MOVEMENT TOWARD TARGET RESTAURANT ===
    let dest one-of patches with [is-restaurant? and open? and rest-id = rid]

    if dest != nobody [
      facexy [pxcor] of dest [pycor] of dest
      
      ;; --- Target-aware movement logic ---
      let step-size calc-step-size
      let next-patch patch-ahead step-size

      ;; Only avoid other restaurants (not the target)
      if next-patch != nobody [
        if [is-restaurant?] of next-patch and [rest-id] of next-patch != rid [
          rt 20 + random 40     ;; small steering instead of total flip
        ]
      ]

      ;; prevent boundary collisions
      if not can-move? step-size [ rt 180 ]
      fd step-size
    ]

    ;; target vanished (closed)
    if dest = nobody [
      set state "wandering"
      set target-rest-id -1
    ]
  ]
end

to choose-restaurant
  ;; pick best restaurant, but DO NOT move here
  let best-rest nobody
  let best-score -9999

  let rest-centers patches with [is-restaurant? and open?]
  let unique-rest-ids remove-duplicates [rest-id] of rest-centers
  
  if debug-mode [
    print (word "=== Customer " who " is choosing among restaurants ===")
  ]

  
  foreach unique-rest-ids [ r-id ->
    let sample one-of patches with [rest-id = r-id and is-restaurant? and open?]
    if sample != nobody [
      let s restaurant-score sample self
      if s > best-score [
        set best-score s
        set best-rest sample
      ]
    ]
  ]

  if best-rest != nobody [
    set target-rest-id [rest-id] of best-rest
    set state "targeting"     ;; ← key change: use the non-blocking mover
    
    if debug-mode [
      print (word "→ Customer " who " CHOSE restaurant " [cuisine] of best-rest
        " with score " precision best-score 3)
    ]

  ]
end

to-report restaurant-score [restaurant-patch customer-agent]
  ;; Computes the attraction score of a restaurant for a specific customer.
  
  ;; --- Extract restaurant attributes ---
  let rest-quality        [quality] of restaurant-patch
  let rest-price-category [price] of restaurant-patch
  let rest-cuisine-type   [cuisine] of restaurant-patch
  let distance-to-rest    distance restaurant-patch

  ;; --- Normalize and invert distance (closer = higher value) ---
  let distance-score (1 / (1 + distance-to-rest))

  ;; --- Convert price category into numeric value (higher = cheaper/better) ---
  let price-score (
    ifelse-value (rest-price-category = "cheap")       [0.9]
    [ifelse-value (rest-price-category = "affordable") [0.6]
    [0.3]]
  )

  ;; --- Cuisine preference match ---
  let customer-favorite-cuisine [favorite-cuisine] of customer-agent
  let cuisine-score (
    ifelse-value (rest-cuisine-type = customer-favorite-cuisine) [1.0] [0.5]
  )

  ;; --- Retrieve customer's personal preferences (0–1) ---
  let pref-quality  [preference-quality]  of customer-agent
  let pref-price    [preference-price]    of customer-agent
  let pref-distance [preference-distance] of customer-agent

  ;; --- Combine everything with global slider weights ---
  let total-score (
    (pref-quality  * rest-quality       * quality-weight) +
    (pref-price    * price-score        * price-weight)  +
    (pref-distance * distance-score     * distance-weight) +
    (cuisine-score * 0.5)   ;; extra minor cuisine bonus
  )
  
  if debug-mode [
      print (word
      "[Customer " [who] of customer-agent
      " (" [favorite-cuisine] of customer-agent
      " pref: Q=" precision pref-quality 2
      " P=" precision pref-price 2
      " D=" precision pref-distance 2
      ")] → Restaurant "
      rest-cuisine-type
      " [Q=" precision rest-quality 2
      " P=" rest-price-category
      " Dist=" precision distance-to-rest 2
      "] => total-score=" precision total-score 3
    )
  ]


  report total-score
end

to stay-in-restaurant
  set stay-ticks stay-ticks - 1
  if stay-ticks <= 0 [
    leave-restaurant "finished-eating"
  ]
end

to leave-restaurant [reason]
  ;; customer leaves a restaurant (either normally or due to closure)
  set inside-rest-id -1
  set state "wandering"
  set color white
  set target-rest-id -1

  ;; small step outward to avoid remaining on restaurant patches
  rt random 360
  let attempt 0
  while [[is-restaurant?] of patch-here and attempt < 10] [
    fd 1.5 + random-float 0.5
    rt random 30 - random 30
    set attempt attempt + 1
  ]

  ;; compute cooldown based on satisfaction (if known)
  let satisfaction 0.0
  if [is-restaurant?] of patch-here [
    set satisfaction [quality] of patch-here
  ]

  let base-cooldown 30
  set just-left? round (base-cooldown + satisfaction * 80)

  ;; reset hunger
  set hunger-level 0

  ;; optional debug
  if debug-mode [
    show (word "Customer " who " left restaurant due to " reason)
  ]
end

to-report valid-restaurant? [rid]
  report rid != -1 and any? patches with [is-restaurant? and open? and rest-id = rid]
end

to handle-target-vanished [rid reason]
  ;; if the advertised / selected restaurant disappeared while en route
  set target-rest-id -1
  set inside-rest-id -1
  ;; visual reset (no longer “branded” by the campaign)
  set color gray

  ;; if already hungry enough, immediately reconsider alternatives; else wander
  ifelse hunger-level > 0.85 and just-left? = 0 [
    set state "hungry"
  ][
    set state "wandering"
  ]

  if debug-mode [
    show (word "Customer " who " retargeted due to " reason " (rid=" rid ")")
  ]
end


to wandering
  rt random 40
  lt random 40
  
  move
  
end

to move
  let step-size calc-step-size
  
  ;; Customers avoid restaurants unless entering
  if breed = customers [
    let next-patch patch-ahead step-size
    if next-patch != nobody [
      if [is-restaurant?] of next-patch and state = "wandering" and hunger-level < 0.8 [
        rt 180
      ]
    ]
  ]
  
  if not can-move? step-size [ rt 180 ]
  fd step-size
end

to-report calc-step-size
  ;; Compute dynamic step size (smaller worlds → smaller step)
  report (ifelse-value (grid-size <= 20)
    [0.06]
    [((grid-size ^ 0.5) / 45)]
  )
end

;; OBSERVER-ONLY stamper
to stamp-circle-observer [cx cy rad col]
  create-turtles 1 [
    setxy cx cy
    set shape "circle"
    set size (rad * 2)   ;; diameter in patch units
    set color col
    set hidden? true
    stamp
    die
  ]
end

to draw-influencer-halos
  clear-drawing
  if meet-radius <= 0 [ stop ]
  foreach sort (influencers with [ last-rest-id != -1 ]) [
    i ->
      let base ([last-rest-color] of i)
      let faded scale-color [last-rest-color] of i 2.5 1 3
      stamp-circle-observer ([xcor] of i) ([ycor] of i) meet-radius faded
  ]
end

to-report surviving-restaurants
  let alive 0
  foreach restaurant-centers [
    pair ->
      let center-patch item 1 pair
      if [is-restaurant?] of center-patch and [open?] of center-patch [
        set alive alive + 1
      ]
  ]
  report alive
end

to-report gini-income
  ;; collect money values only from restaurant centers
  let incomes []
  foreach restaurant-centers [
    pair ->
      let center-patch item 1 pair
      if [open?] of center-patch [
        set incomes lput [money] of center-patch incomes
      ]
  ]

  if empty? incomes [ report 0 ]

  ;; standard Gini computation
  let sorted sort incomes
  let n length sorted
  let meanval mean sorted
  if meanval = 0 [ report 0 ]

  ;; sum over indices properly using map instead of undeclared 'i'
  let cum-sum sum map [ idx -> (idx + 1) * item idx sorted ] (range n)
  report (2 * cum-sum) / (n * sum sorted) - ((n + 1) / n)
end

to-report top-restaurant-share
  ;; collect the current money values from restaurant centers only
  let incomes []
  foreach restaurant-centers [
    pair ->
      let center-patch item 1 pair
      if [open?] of center-patch [
        set incomes lput [money] of center-patch incomes
      ]
  ]
  
  if empty? incomes [ report 0 ]

  let max-income max incomes
  let total-income sum incomes
  if total-income = 0 [ report 0 ]

  ;; return fraction of total wealth held by the richest restaurant
  report max-income / total-income
end

to-report top-restaurant-name
  let richest nobody
  let max-income -1
  foreach restaurant-centers [
    pair ->
      let center item 1 pair
      if [open?] of center [
        let val [money] of center
        if val > max-income [
          set max-income val
          set richest center
        ]
      ]
  ]
  if richest = nobody [ report "none" ]
  report [cuisine] of richest
end

to-report active-influencers
  report count influencers with [last-rest-id != -1]
end





; Copyright 2025 Máté Kovács.]]></code>
  <widgets>
    <view x="363" wrappingAllowedX="false" y="10" frameRate="30.0" minPycor="-10" height="612" showTickCounter="true" patchSize="32.0" fontSize="10" wrappingAllowedY="false" width="612" tickCounterLabel="ticks" maxPycor="9" updateMode="1" maxPxcor="9" minPxcor="-10"></view>
    <chooser x="75" y="3" height="60" variable="grid-size" current="0" width="130" display="grid-size">
      <choice type="double" value="20.0"></choice>
      <choice type="double" value="128.0"></choice>
    </chooser>
    <button x="195" y="75" height="60" disableUntilTicks="true" forever="false" kind="Observer" width="105" display="go-once">go</button>
    <button x="75" y="75" height="60" disableUntilTicks="true" forever="true" kind="Observer" width="105" display="go">go</button>
    <slider x="25" step="1" y="150" max="500" width="150" display="num-customers" height="50" min="1" direction="Horizontal" default="77.0" variable="num-customers"></slider>
    <slider x="185" step="1" y="150" max="100" width="150" display="num-influencers" height="50" min="0" direction="Horizontal" default="36.0" variable="num-influencers"></slider>
    <slider x="25" step="0.1" y="329" max="6.5" width="150" display="meet-radius" height="50" min="0.5" direction="Horizontal" default="1.5" variable="meet-radius"></slider>
    <slider x="185" step="0.00001" y="329" max="0.002" width="150" display="hunger-rate" height="50" min="0.00005" direction="Horizontal" default="0.002" variable="hunger-rate"></slider>
    <slider x="25" step="10" y="389" max="2000" width="150" display="influencer-price" height="50" min="500" direction="Horizontal" default="520.0" variable="influencer-price"></slider>
    <slider x="25" step="0.1" y="210" max="5" width="150" display="price-weight" height="50" min="0" direction="Horizontal" default="1.4" variable="price-weight"></slider>
    <slider x="185" step="0.1" y="210" max="5" width="150" display="distance-weight" height="50" min="0" direction="Horizontal" default="4.0" variable="distance-weight"></slider>
    <input x="25" multiline="false" y="450" height="60" variable="total-budget" type="number" width="150">10000.0</input>
    <slider x="25" step="0.1" y="270" max="5" width="150" display="quality-weight" height="50" min="0" direction="Horizontal" default="1.7" variable="quality-weight"></slider>
    <slider x="185" step="0.1" y="270" max="20" width="150" display="softmax-variance" height="50" min="0" direction="Horizontal" default="9.2" variable="softmax-variance"></slider>
    <switch x="120" y="530" height="40" on="false" variable="debug-mode" width="105" display="debug-mode"></switch>
    <plot x="985" autoPlotX="true" yMax="10.0" autoPlotY="true" yAxis="money (units)" y="359" xMin="0.0" height="250" legend="true" xMax="10.0" yMin="0.0" width="225" xAxis="ticks" display="Restaurant Income over Time">
      <setup></setup>
      <update></update>
      <pen interval="1.0" mode="0" display="thai" color="-2674135" legend="true">
        <setup></setup>
        <update>plot mean [money] of patches with [cuisine = "thai"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="mexican" color="-955883" legend="true">
        <setup></setup>
        <update>plot mean [money] of patches with [cuisine = "mexican"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="italian" color="-2064490" legend="true">
        <setup></setup>
        <update>plot mean [money] of patches with [cuisine = "italian"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="japanese" color="-10899396" legend="true">
        <setup></setup>
        <update>plot mean [money] of patches with [cuisine = "japanese"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="indian" color="-13345367" legend="true">
        <setup></setup>
        <update>plot mean [money] of patches with [cuisine = "indian"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="greek" color="-8630108" legend="true">
        <setup></setup>
        <update>plot mean [money] of patches with [cuisine = "greek"]</update>
      </pen>
    </plot>
    <plot x="1325" autoPlotX="true" yMax="10.0" autoPlotY="true" yAxis="number of customers inside" y="361" xMin="0.0" height="250" legend="false" xMax="10.0" yMin="0.0" width="225" xAxis="ticks" display="Customer Distribution per Restaurant">
      <setup></setup>
      <update></update>
      <pen interval="1.0" mode="0" display="thai" color="-2674135" legend="true">
        <setup></setup>
        <update>plot count customers with [state = "inside" and [cuisine] of patch-here = "thai"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="mexican" color="-955883" legend="true">
        <setup></setup>
        <update>plot count customers with [state = "inside" and [cuisine] of patch-here = "mexican"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="italian" color="-2064490" legend="true">
        <setup></setup>
        <update>plot count customers with [state = "inside" and [cuisine] of patch-here = "italian"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="japanese" color="-10899396" legend="true">
        <setup></setup>
        <update>plot count customers with [state = "inside" and [cuisine] of patch-here = "japanese"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="indian" color="-13345367" legend="true">
        <setup></setup>
        <update>plot count customers with [state = "inside" and [cuisine] of patch-here = "indian"]</update>
      </pen>
      <pen interval="1.0" mode="0" display="greek" color="-8630108" legend="true">
        <setup></setup>
        <update>plot count customers with [state = "inside" and [cuisine] of patch-here = "greek"]</update>
      </pen>
    </plot>
    <button x="220" y="3" height="60" disableUntilTicks="false" forever="false" kind="Observer" width="80" display="setup">setup</button>
    <monitor x="1217" precision="17" y="387" height="60" fontSize="11" width="100" display="Surviving Restaurants">surviving-restaurants</monitor>
    <monitor x="1218" precision="17" y="459" height="60" fontSize="11" width="100" display="Free Influencers">count influencers with [last-rest-id = -1]</monitor>
    <monitor x="1219" precision="17" y="531" height="60" fontSize="11" width="100" display="Income Inequality (Gini)">gini-income</monitor>
    <monitor x="1355" precision="17" y="286" height="60" fontSize="11" width="165" display="Greek restaurant's money">restaurant-money 5</monitor>
    <monitor x="1180" precision="17" y="286" height="60" fontSize="11" width="165" display="Indian restaurant's money">restaurant-money 4</monitor>
    <monitor x="1005" precision="17" y="216" height="60" fontSize="11" width="165" display="Thai restaurant's money">restaurant-money 0</monitor>
    <monitor x="1180" precision="17" y="216" height="60" fontSize="11" width="165" display="Mexican restaurant's money">restaurant-money 1</monitor>
    <monitor x="1355" precision="17" y="216" height="60" fontSize="11" width="165" display="Italian restaurant's money">restaurant-money 2</monitor>
    <monitor x="1005" precision="17" y="286" height="60" fontSize="11" width="165" display="Japanese restaurant's money">restaurant-money 3</monitor>
    <slider x="185" step="100" y="389" max="3000" width="150" display="influencer-duration" height="50" min="200" direction="Horizontal" default="1400.0" variable="influencer-duration" units="tick"></slider>
    <slider x="185" step="1" y="450" max="3000" width="150" display="maintenance-cost" height="60" min="20" direction="Horizontal" default="332.0" variable="maintenance-cost"></slider>
    <plot x="1330" autoPlotX="true" yMax="10.0" autoPlotY="true" yAxis="Active influencers" y="25" xMin="0.0" height="175" legend="false" xMax="7.0" yMin="0.0" xAxis="ticks" display="Active Influencers Over Time" width="220" sizeVersion="0">
      <setup></setup>
      <update>plot active-influencers</update>
      <pen interval="1.0" mode="0" display="pen-0" color="-16777216" legend="true">
        <setup></setup>
        <update></update>
      </pen>
    </plot>
    <plot x="985" autoPlotX="true" yMax="10.0" autoPlotY="true" yAxis="Count" y="25" xMin="0.0" height="175" legend="true" xMax="7.0" yMin="0.0" xAxis="Cuisine" display="Customer Cuisine Preferences" width="225" sizeVersion="0">
      <setup><![CDATA[clear-plot
let cuisines cuisines-list
let colors   [red orange pink green blue violet]

;; axis ranges (static snapshot)
let counts map [ cu -> count customers with [favorite-cuisine = cu] ] cuisines
let ymax (max (sentence 1 counts))  ;; avoid 0 range
set-plot-x-range 0 length cuisines
set-plot-y-range 0 (ymax + 5)

foreach (range length cuisines)
[ idx ->
  let c item idx cuisines
  let h item idx counts

  create-temporary-plot-pen c
  set-plot-pen-mode 1            ;; bar mode
  set-plot-pen-color item idx colors

  plot-pen-up
  plotxy (idx + 1) 0 
  plot-pen-down 
  plotxy (idx + 1) h 
  plot-pen-up
]]]></setup>
      <update></update>
    </plot>
    <monitor x="1220" precision="17" y="45" height="60" fontSize="11" width="100" display="Top Restaurant Market Share">top-restaurant-share * 100</monitor>
    <monitor x="1220" precision="17" y="120" height="60" fontSize="11" width="100" display="Top Restaurant">top-restaurant-name</monitor>
  </widgets>
  <info>## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
</info>
  <turtleShapes>
    <shape name="default" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="5"></point>
        <point x="40" y="250"></point>
        <point x="150" y="205"></point>
        <point x="260" y="250"></point>
      </polygon>
    </shape>
    <shape name="airplane" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="135" y="15"></point>
        <point x="120" y="60"></point>
        <point x="120" y="105"></point>
        <point x="15" y="165"></point>
        <point x="15" y="195"></point>
        <point x="120" y="180"></point>
        <point x="135" y="240"></point>
        <point x="105" y="270"></point>
        <point x="120" y="285"></point>
        <point x="150" y="270"></point>
        <point x="180" y="285"></point>
        <point x="210" y="270"></point>
        <point x="165" y="240"></point>
        <point x="180" y="180"></point>
        <point x="285" y="195"></point>
        <point x="285" y="165"></point>
        <point x="180" y="105"></point>
        <point x="180" y="60"></point>
        <point x="165" y="15"></point>
      </polygon>
    </shape>
    <shape name="arrow" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="0" y="150"></point>
        <point x="105" y="150"></point>
        <point x="105" y="293"></point>
        <point x="195" y="293"></point>
        <point x="195" y="150"></point>
        <point x="300" y="150"></point>
      </polygon>
    </shape>
    <shape name="box" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="285"></point>
        <point x="285" y="225"></point>
        <point x="285" y="75"></point>
        <point x="150" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="135"></point>
        <point x="15" y="75"></point>
        <point x="150" y="15"></point>
        <point x="285" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="75"></point>
        <point x="15" y="225"></point>
        <point x="150" y="285"></point>
        <point x="150" y="135"></point>
      </polygon>
      <line endX="150" startY="285" marked="false" color="255" endY="135" startX="150"></line>
      <line endX="15" startY="135" marked="false" color="255" endY="75" startX="150"></line>
      <line endX="285" startY="135" marked="false" color="255" endY="75" startX="150"></line>
    </shape>
    <shape name="bug" rotatable="true" editableColorIndex="0">
      <circle x="96" y="182" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="110" y="127" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <circle x="110" y="75" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <line endX="80" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
      <line endX="220" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
    </shape>
    <shape name="butterfly" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="209" y="199"></point>
        <point x="225" y="225"></point>
        <point x="225" y="255"></point>
        <point x="195" y="270"></point>
        <point x="165" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="89" y="198"></point>
        <point x="75" y="225"></point>
        <point x="75" y="255"></point>
        <point x="105" y="270"></point>
        <point x="135" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="139" y="148"></point>
        <point x="100" y="105"></point>
        <point x="55" y="90"></point>
        <point x="25" y="90"></point>
        <point x="10" y="105"></point>
        <point x="10" y="135"></point>
        <point x="25" y="180"></point>
        <point x="40" y="195"></point>
        <point x="85" y="194"></point>
        <point x="139" y="163"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="162" y="150"></point>
        <point x="200" y="105"></point>
        <point x="245" y="90"></point>
        <point x="275" y="90"></point>
        <point x="290" y="105"></point>
        <point x="290" y="135"></point>
        <point x="275" y="180"></point>
        <point x="260" y="195"></point>
        <point x="215" y="195"></point>
        <point x="162" y="165"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="135" y="225"></point>
        <point x="120" y="150"></point>
        <point x="135" y="120"></point>
        <point x="150" y="105"></point>
        <point x="165" y="120"></point>
        <point x="180" y="150"></point>
        <point x="165" y="225"></point>
      </polygon>
      <circle x="135" y="90" marked="false" color="255" diameter="30" filled="true"></circle>
      <line endX="195" startY="105" marked="false" color="255" endY="60" startX="150"></line>
      <line endX="105" startY="105" marked="false" color="255" endY="60" startX="150"></line>
    </shape>
    <shape name="car" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="300" y="180"></point>
        <point x="279" y="164"></point>
        <point x="261" y="144"></point>
        <point x="240" y="135"></point>
        <point x="226" y="132"></point>
        <point x="213" y="106"></point>
        <point x="203" y="84"></point>
        <point x="185" y="63"></point>
        <point x="159" y="50"></point>
        <point x="135" y="50"></point>
        <point x="75" y="60"></point>
        <point x="0" y="150"></point>
        <point x="0" y="165"></point>
        <point x="0" y="225"></point>
        <point x="300" y="225"></point>
        <point x="300" y="180"></point>
      </polygon>
      <circle x="180" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <circle x="30" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="162" y="80"></point>
        <point x="132" y="78"></point>
        <point x="134" y="135"></point>
        <point x="209" y="135"></point>
        <point x="194" y="105"></point>
        <point x="189" y="96"></point>
        <point x="180" y="89"></point>
      </polygon>
      <circle x="47" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
      <circle x="195" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
    </shape>
    <shape name="circle" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="circle 2" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
    </shape>
    <shape name="cow" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="200" y="193"></point>
        <point x="197" y="249"></point>
        <point x="179" y="249"></point>
        <point x="177" y="196"></point>
        <point x="166" y="187"></point>
        <point x="140" y="189"></point>
        <point x="93" y="191"></point>
        <point x="78" y="179"></point>
        <point x="72" y="211"></point>
        <point x="49" y="209"></point>
        <point x="48" y="181"></point>
        <point x="37" y="149"></point>
        <point x="25" y="120"></point>
        <point x="25" y="89"></point>
        <point x="45" y="72"></point>
        <point x="103" y="84"></point>
        <point x="179" y="75"></point>
        <point x="198" y="76"></point>
        <point x="252" y="64"></point>
        <point x="272" y="81"></point>
        <point x="293" y="103"></point>
        <point x="285" y="121"></point>
        <point x="255" y="121"></point>
        <point x="242" y="118"></point>
        <point x="224" y="167"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="73" y="210"></point>
        <point x="86" y="251"></point>
        <point x="62" y="249"></point>
        <point x="48" y="208"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="25" y="114"></point>
        <point x="16" y="195"></point>
        <point x="9" y="204"></point>
        <point x="23" y="213"></point>
        <point x="25" y="200"></point>
        <point x="39" y="123"></point>
      </polygon>
    </shape>
    <shape name="cylinder" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="dot" rotatable="false" editableColorIndex="0">
      <circle x="90" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
    </shape>
    <shape name="face happy" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="90" y="239"></point>
        <point x="62" y="213"></point>
        <point x="47" y="191"></point>
        <point x="67" y="179"></point>
        <point x="90" y="203"></point>
        <point x="109" y="218"></point>
        <point x="150" y="225"></point>
        <point x="192" y="218"></point>
        <point x="210" y="203"></point>
        <point x="227" y="181"></point>
        <point x="251" y="194"></point>
        <point x="236" y="217"></point>
        <point x="212" y="240"></point>
      </polygon>
    </shape>
    <shape name="face neutral" rotatable="false" editableColorIndex="0">
      <circle x="8" y="7" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <rectangle endX="240" startY="195" marked="false" color="255" endY="225" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="face sad" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="168"></point>
        <point x="90" y="184"></point>
        <point x="62" y="210"></point>
        <point x="47" y="232"></point>
        <point x="67" y="244"></point>
        <point x="90" y="220"></point>
        <point x="109" y="205"></point>
        <point x="150" y="198"></point>
        <point x="192" y="205"></point>
        <point x="210" y="220"></point>
        <point x="227" y="242"></point>
        <point x="251" y="229"></point>
        <point x="236" y="206"></point>
        <point x="212" y="183"></point>
      </polygon>
    </shape>
    <shape name="fish" rotatable="false" editableColorIndex="0">
      <polygon color="-1" filled="true" marked="false">
        <point x="44" y="131"></point>
        <point x="21" y="87"></point>
        <point x="15" y="86"></point>
        <point x="0" y="120"></point>
        <point x="15" y="150"></point>
        <point x="0" y="180"></point>
        <point x="13" y="214"></point>
        <point x="20" y="212"></point>
        <point x="45" y="166"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="135" y="195"></point>
        <point x="119" y="235"></point>
        <point x="95" y="218"></point>
        <point x="76" y="210"></point>
        <point x="46" y="204"></point>
        <point x="60" y="165"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="75" y="45"></point>
        <point x="83" y="77"></point>
        <point x="71" y="103"></point>
        <point x="86" y="114"></point>
        <point x="166" y="78"></point>
        <point x="135" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="136"></point>
        <point x="151" y="77"></point>
        <point x="226" y="81"></point>
        <point x="280" y="119"></point>
        <point x="292" y="146"></point>
        <point x="292" y="160"></point>
        <point x="287" y="170"></point>
        <point x="270" y="195"></point>
        <point x="195" y="210"></point>
        <point x="151" y="212"></point>
        <point x="30" y="166"></point>
      </polygon>
      <circle x="215" y="106" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="flag" rotatable="false" editableColorIndex="0">
      <rectangle endX="75" startY="15" marked="true" color="-1920102913" endY="300" startX="60" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="90" y="150"></point>
        <point x="270" y="90"></point>
        <point x="90" y="30"></point>
      </polygon>
      <line endX="90" startY="135" marked="true" color="-1920102913" endY="135" startX="75"></line>
      <line endX="90" startY="45" marked="true" color="-1920102913" endY="45" startX="75"></line>
    </shape>
    <shape name="flower" rotatable="false" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="135" y="120"></point>
        <point x="165" y="165"></point>
        <point x="180" y="210"></point>
        <point x="180" y="240"></point>
        <point x="150" y="300"></point>
        <point x="165" y="300"></point>
        <point x="195" y="240"></point>
        <point x="195" y="195"></point>
        <point x="165" y="135"></point>
      </polygon>
      <circle x="85" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="147" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="192" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="85" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="70" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="25" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="96" y="51" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="113" y="68" marked="false" color="255" diameter="74" filled="true"></circle>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="189" y="233"></point>
        <point x="219" y="188"></point>
        <point x="249" y="173"></point>
        <point x="279" y="188"></point>
        <point x="234" y="218"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="180" y="255"></point>
        <point x="150" y="210"></point>
        <point x="105" y="210"></point>
        <point x="75" y="240"></point>
        <point x="135" y="240"></point>
      </polygon>
    </shape>
    <shape name="house" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="120" marked="true" color="-1920102913" endY="285" startX="45" filled="true"></rectangle>
      <rectangle endX="180" startY="210" marked="false" color="255" endY="285" startX="120" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="120"></point>
        <point x="150" y="15"></point>
        <point x="285" y="120"></point>
      </polygon>
      <line endX="270" startY="120" marked="false" color="255" endY="120" startX="30"></line>
    </shape>
    <shape name="leaf" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="210"></point>
        <point x="135" y="195"></point>
        <point x="120" y="210"></point>
        <point x="60" y="210"></point>
        <point x="30" y="195"></point>
        <point x="60" y="180"></point>
        <point x="60" y="165"></point>
        <point x="15" y="135"></point>
        <point x="30" y="120"></point>
        <point x="15" y="105"></point>
        <point x="40" y="104"></point>
        <point x="45" y="90"></point>
        <point x="60" y="90"></point>
        <point x="90" y="105"></point>
        <point x="105" y="120"></point>
        <point x="120" y="120"></point>
        <point x="105" y="60"></point>
        <point x="120" y="60"></point>
        <point x="135" y="30"></point>
        <point x="150" y="15"></point>
        <point x="165" y="30"></point>
        <point x="180" y="60"></point>
        <point x="195" y="60"></point>
        <point x="180" y="120"></point>
        <point x="195" y="120"></point>
        <point x="210" y="105"></point>
        <point x="240" y="90"></point>
        <point x="255" y="90"></point>
        <point x="263" y="104"></point>
        <point x="285" y="105"></point>
        <point x="270" y="120"></point>
        <point x="285" y="135"></point>
        <point x="240" y="165"></point>
        <point x="240" y="180"></point>
        <point x="270" y="195"></point>
        <point x="240" y="210"></point>
        <point x="180" y="210"></point>
        <point x="165" y="195"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="195"></point>
        <point x="135" y="240"></point>
        <point x="120" y="255"></point>
        <point x="105" y="255"></point>
        <point x="105" y="285"></point>
        <point x="135" y="285"></point>
        <point x="165" y="240"></point>
        <point x="165" y="195"></point>
      </polygon>
    </shape>
    <shape name="line" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="line half" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="150" startX="150"></line>
    </shape>
    <shape name="pentagon" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="15" y="120"></point>
        <point x="60" y="285"></point>
        <point x="240" y="285"></point>
        <point x="285" y="120"></point>
      </polygon>
    </shape>
    <shape name="person" rotatable="false" editableColorIndex="0">
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="195" y="90"></point>
      </polygon>
      <rectangle endX="172" startY="79" marked="true" color="-1920102913" endY="94" startX="127" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="195" y="90"></point>
        <point x="240" y="150"></point>
        <point x="225" y="180"></point>
        <point x="165" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="60" y="150"></point>
        <point x="75" y="180"></point>
        <point x="135" y="105"></point>
      </polygon>
    </shape>
    <shape name="person business" rotatable="false" editableColorIndex="0">
      <rectangle endX="180" startY="90" marked="false" color="-1" endY="180" startX="120" filled="true"></rectangle>
      <polygon color="878553599" filled="true" marked="false">
        <point x="135" y="90"></point>
        <point x="150" y="105"></point>
        <point x="135" y="180"></point>
        <point x="150" y="195"></point>
        <point x="165" y="180"></point>
        <point x="150" y="105"></point>
        <point x="165" y="90"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="120" y="90"></point>
        <point x="105" y="90"></point>
        <point x="60" y="195"></point>
        <point x="90" y="210"></point>
        <point x="116" y="154"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="183" y="153"></point>
        <point x="210" y="210"></point>
        <point x="240" y="195"></point>
        <point x="195" y="90"></point>
        <point x="180" y="90"></point>
        <point x="150" y="165"></point>
      </polygon>
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <rectangle endX="172" startY="76" marked="true" color="-1920102913" endY="91" startX="127" filled="true"></rectangle>
      <line endX="161" startY="90" marked="false" color="255" endY="94" startX="172"></line>
      <line endX="139" startY="90" marked="false" color="255" endY="94" startX="128"></line>
      <polygon color="878553599" filled="true" marked="false">
        <point x="195" y="225"></point>
        <point x="195" y="300"></point>
        <point x="270" y="270"></point>
        <point x="270" y="195"></point>
      </polygon>
      <rectangle endX="195" startY="225" marked="false" color="764264191" endY="300" startX="180" filled="true"></rectangle>
      <polygon color="496990463" filled="true" marked="false">
        <point x="180" y="226"></point>
        <point x="195" y="226"></point>
        <point x="270" y="196"></point>
        <point x="255" y="196"></point>
      </polygon>
      <polygon color="878553599" filled="true" marked="false">
        <point x="209" y="202"></point>
        <point x="209" y="216"></point>
        <point x="244" y="202"></point>
        <point x="243" y="188"></point>
      </polygon>
      <line endX="150" startY="90" marked="false" color="255" endY="165" startX="180"></line>
      <line endX="150" startY="90" marked="false" color="255" endY="165" startX="120"></line>
    </shape>
    <shape name="plant" rotatable="false" editableColorIndex="0">
      <rectangle endX="165" startY="90" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="255"></point>
        <point x="90" y="210"></point>
        <point x="45" y="195"></point>
        <point x="75" y="255"></point>
        <point x="135" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="255"></point>
        <point x="210" y="210"></point>
        <point x="255" y="195"></point>
        <point x="225" y="255"></point>
        <point x="165" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="180"></point>
        <point x="90" y="135"></point>
        <point x="45" y="120"></point>
        <point x="75" y="180"></point>
        <point x="135" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="180"></point>
        <point x="165" y="210"></point>
        <point x="225" y="180"></point>
        <point x="255" y="120"></point>
        <point x="210" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="105"></point>
        <point x="90" y="60"></point>
        <point x="45" y="45"></point>
        <point x="75" y="105"></point>
        <point x="135" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="105"></point>
        <point x="165" y="135"></point>
        <point x="225" y="105"></point>
        <point x="255" y="45"></point>
        <point x="210" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="90"></point>
        <point x="120" y="45"></point>
        <point x="150" y="15"></point>
        <point x="180" y="45"></point>
        <point x="165" y="90"></point>
      </polygon>
    </shape>
    <shape name="sheep" rotatable="false" editableColorIndex="15">
      <circle x="203" y="65" marked="true" color="-1" diameter="88" filled="true"></circle>
      <circle x="70" y="65" marked="true" color="-1" diameter="162" filled="true"></circle>
      <circle x="150" y="105" marked="true" color="-1" diameter="120" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="218" y="120"></point>
        <point x="240" y="165"></point>
        <point x="255" y="165"></point>
        <point x="278" y="120"></point>
      </polygon>
      <circle x="214" y="72" marked="false" color="-1920102913" diameter="67" filled="true"></circle>
      <rectangle endX="179" startY="223" marked="true" color="-1" endY="298" startX="164" filled="true"></rectangle>
      <polygon color="-1" filled="true" marked="true">
        <point x="45" y="285"></point>
        <point x="30" y="285"></point>
        <point x="30" y="240"></point>
        <point x="15" y="195"></point>
        <point x="45" y="210"></point>
      </polygon>
      <circle x="3" y="83" marked="true" color="-1" diameter="150" filled="true"></circle>
      <rectangle endX="80" startY="221" marked="true" color="-1" endY="296" startX="65" filled="true"></rectangle>
      <polygon color="-1" filled="true" marked="true">
        <point x="195" y="285"></point>
        <point x="210" y="285"></point>
        <point x="210" y="240"></point>
        <point x="240" y="210"></point>
        <point x="195" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="276" y="85"></point>
        <point x="285" y="105"></point>
        <point x="302" y="99"></point>
        <point x="294" y="83"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="false">
        <point x="219" y="85"></point>
        <point x="210" y="105"></point>
        <point x="193" y="99"></point>
        <point x="201" y="83"></point>
      </polygon>
    </shape>
    <shape name="square" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
    </shape>
    <shape name="square 2" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
      <rectangle endX="240" startY="60" marked="false" color="255" endY="240" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="star" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="151" y="1"></point>
        <point x="185" y="108"></point>
        <point x="298" y="108"></point>
        <point x="207" y="175"></point>
        <point x="242" y="282"></point>
        <point x="151" y="216"></point>
        <point x="59" y="282"></point>
        <point x="94" y="175"></point>
        <point x="3" y="108"></point>
        <point x="116" y="108"></point>
      </polygon>
    </shape>
    <shape name="target" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="true"></circle>
      <circle x="90" y="90" marked="false" color="255" diameter="120" filled="true"></circle>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
    </shape>
    <shape name="tree" rotatable="false" editableColorIndex="0">
      <circle x="118" y="3" marked="true" color="-1920102913" diameter="94" filled="true"></circle>
      <rectangle endX="180" startY="195" marked="false" color="-1653716737" endY="300" startX="120" filled="true"></rectangle>
      <circle x="65" y="21" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="116" y="41" marked="true" color="-1920102913" diameter="127" filled="true"></circle>
      <circle x="45" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <circle x="104" y="74" marked="true" color="-1920102913" diameter="152" filled="true"></circle>
    </shape>
    <shape name="triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
    </shape>
    <shape name="triangle 2" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="151" y="99"></point>
        <point x="225" y="223"></point>
        <point x="75" y="224"></point>
      </polygon>
    </shape>
    <shape name="truck" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="45" marked="true" color="-1920102913" endY="187" startX="4" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="296" y="193"></point>
        <point x="296" y="150"></point>
        <point x="259" y="134"></point>
        <point x="244" y="104"></point>
        <point x="208" y="104"></point>
        <point x="207" y="194"></point>
      </polygon>
      <rectangle endX="195" startY="60" marked="false" color="-1" endY="105" startX="195" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="238" y="112"></point>
        <point x="252" y="141"></point>
        <point x="219" y="141"></point>
        <point x="218" y="112"></point>
      </polygon>
      <circle x="234" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <rectangle endX="214" startY="185" marked="true" color="-1920102913" endY="194" startX="181" filled="true"></rectangle>
      <circle x="144" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="144" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="234" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
    </shape>
    <shape name="turtle" rotatable="true" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="215" y="204"></point>
        <point x="240" y="233"></point>
        <point x="246" y="254"></point>
        <point x="228" y="266"></point>
        <point x="215" y="252"></point>
        <point x="193" y="210"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="195" y="90"></point>
        <point x="225" y="75"></point>
        <point x="245" y="75"></point>
        <point x="260" y="89"></point>
        <point x="269" y="108"></point>
        <point x="261" y="124"></point>
        <point x="240" y="105"></point>
        <point x="225" y="105"></point>
        <point x="210" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="105" y="90"></point>
        <point x="75" y="75"></point>
        <point x="55" y="75"></point>
        <point x="40" y="89"></point>
        <point x="31" y="108"></point>
        <point x="39" y="124"></point>
        <point x="60" y="105"></point>
        <point x="75" y="105"></point>
        <point x="90" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="132" y="85"></point>
        <point x="134" y="64"></point>
        <point x="107" y="51"></point>
        <point x="108" y="17"></point>
        <point x="150" y="2"></point>
        <point x="192" y="18"></point>
        <point x="192" y="52"></point>
        <point x="169" y="65"></point>
        <point x="172" y="87"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="85" y="204"></point>
        <point x="60" y="233"></point>
        <point x="54" y="254"></point>
        <point x="72" y="266"></point>
        <point x="85" y="252"></point>
        <point x="107" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="119" y="75"></point>
        <point x="179" y="75"></point>
        <point x="209" y="101"></point>
        <point x="224" y="135"></point>
        <point x="220" y="225"></point>
        <point x="175" y="261"></point>
        <point x="128" y="261"></point>
        <point x="81" y="224"></point>
        <point x="74" y="135"></point>
        <point x="88" y="99"></point>
      </polygon>
    </shape>
    <shape name="wheel" rotatable="false" editableColorIndex="0">
      <circle x="3" y="3" marked="true" color="-1920102913" diameter="294" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <line endX="150" startY="285" marked="true" color="-1920102913" endY="15" startX="150"></line>
      <line endX="285" startY="150" marked="true" color="-1920102913" endY="150" startX="15"></line>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
      <line endX="79" startY="40" marked="true" color="-1920102913" endY="269" startX="216"></line>
      <line endX="269" startY="84" marked="true" color="-1920102913" endY="221" startX="40"></line>
      <line endX="269" startY="216" marked="true" color="-1920102913" endY="79" startX="40"></line>
      <line endX="221" startY="40" marked="true" color="-1920102913" endY="269" startX="84"></line>
    </shape>
    <shape name="wolf" rotatable="false" editableColorIndex="0">
      <polygon color="255" filled="true" marked="false">
        <point x="253" y="133"></point>
        <point x="245" y="131"></point>
        <point x="245" y="133"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="2" y="194"></point>
        <point x="13" y="197"></point>
        <point x="30" y="191"></point>
        <point x="38" y="193"></point>
        <point x="38" y="205"></point>
        <point x="20" y="226"></point>
        <point x="20" y="257"></point>
        <point x="27" y="265"></point>
        <point x="38" y="266"></point>
        <point x="40" y="260"></point>
        <point x="31" y="253"></point>
        <point x="31" y="230"></point>
        <point x="60" y="206"></point>
        <point x="68" y="198"></point>
        <point x="75" y="209"></point>
        <point x="66" y="228"></point>
        <point x="65" y="243"></point>
        <point x="82" y="261"></point>
        <point x="84" y="268"></point>
        <point x="100" y="267"></point>
        <point x="103" y="261"></point>
        <point x="77" y="239"></point>
        <point x="79" y="231"></point>
        <point x="100" y="207"></point>
        <point x="98" y="196"></point>
        <point x="119" y="201"></point>
        <point x="143" y="202"></point>
        <point x="160" y="195"></point>
        <point x="166" y="210"></point>
        <point x="172" y="213"></point>
        <point x="173" y="238"></point>
        <point x="167" y="251"></point>
        <point x="160" y="248"></point>
        <point x="154" y="265"></point>
        <point x="169" y="264"></point>
        <point x="178" y="247"></point>
        <point x="186" y="240"></point>
        <point x="198" y="260"></point>
        <point x="200" y="271"></point>
        <point x="217" y="271"></point>
        <point x="219" y="262"></point>
        <point x="207" y="258"></point>
        <point x="195" y="230"></point>
        <point x="192" y="198"></point>
        <point x="210" y="184"></point>
        <point x="227" y="164"></point>
        <point x="242" y="144"></point>
        <point x="259" y="145"></point>
        <point x="284" y="151"></point>
        <point x="277" y="141"></point>
        <point x="293" y="140"></point>
        <point x="299" y="134"></point>
        <point x="297" y="127"></point>
        <point x="273" y="119"></point>
        <point x="270" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="-1" y="195"></point>
        <point x="14" y="180"></point>
        <point x="36" y="166"></point>
        <point x="40" y="153"></point>
        <point x="53" y="140"></point>
        <point x="82" y="131"></point>
        <point x="134" y="133"></point>
        <point x="159" y="126"></point>
        <point x="188" y="115"></point>
        <point x="227" y="108"></point>
        <point x="236" y="102"></point>
        <point x="238" y="98"></point>
        <point x="268" y="86"></point>
        <point x="269" y="92"></point>
        <point x="281" y="87"></point>
        <point x="269" y="103"></point>
        <point x="269" y="113"></point>
      </polygon>
    </shape>
    <shape name="x" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="75"></point>
        <point x="225" y="30"></point>
        <point x="30" y="225"></point>
        <point x="75" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="75"></point>
        <point x="75" y="30"></point>
        <point x="270" y="225"></point>
        <point x="225" y="270"></point>
      </polygon>
    </shape>
  </turtleShapes>
  <linkShapes>
    <shape name="default" curviness="0.0">
      <lines>
        <line x="-0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
        <line x="0.0" visible="true">
          <dash value="1.0"></dash>
          <dash value="0.0"></dash>
        </line>
        <line x="0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
      </lines>
      <indicator>
        <shape name="link direction" rotatable="true" editableColorIndex="0">
          <line endX="90" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
          <line endX="210" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
        </shape>
      </indicator>
    </shape>
  </linkShapes>
  <previewCommands>setup repeat 75 [ go ]</previewCommands>
  <experiments>
    <experiment name="experiment1" repetitions="20" sequentialRunOrder="true" runMetricsEveryStep="true" timeLimit="10000">
      <setup>setup</setup>
      <go>go</go>
      <metrics>
        <metric>top-restaurant-share</metric>
        <metric>gini-income</metric>
        <metric>surviving-restaurants</metric>
        <metric>active-influencers</metric>
      </metrics>
      <constants>
        <enumeratedValueSet variable="num-customers">
          <value value="1"></value>
          <value value="10"></value>
          <value value="20"></value>
          <value value="30"></value>
          <value value="40"></value>
          <value value="50"></value>
          <value value="60"></value>
          <value value="70"></value>
          <value value="80"></value>
          <value value="90"></value>
          <value value="100"></value>
          <value value="110"></value>
          <value value="120"></value>
          <value value="130"></value>
          <value value="140"></value>
          <value value="150"></value>
          <value value="160"></value>
          <value value="170"></value>
          <value value="180"></value>
          <value value="190"></value>
          <value value="200"></value>
          <value value="210"></value>
          <value value="220"></value>
          <value value="230"></value>
          <value value="240"></value>
          <value value="250"></value>
        </enumeratedValueSet>
        <enumeratedValueSet variable="softmax-variance">
          <value value="0"></value>
          <value value="2"></value>
          <value value="4"></value>
          <value value="6"></value>
          <value value="8"></value>
          <value value="10"></value>
          <value value="12"></value>
          <value value="14"></value>
          <value value="16"></value>
          <value value="18"></value>
          <value value="20"></value>
        </enumeratedValueSet>
      </constants>
    </experiment>
  </experiments>
</model>
